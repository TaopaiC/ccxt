<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;
use \ccxt\InvalidAddress;
use \ccxt\InvalidOrder;

class max extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'max',
            'name' => 'Max',
            'countries' => array( 'TW' ),
            'version' => 'v2',
            'enableRateLimit' => false,
            'rateLimit' => 1200,
            'certified' => false,
            'has' => array(
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelOrders' => false,
                'CORS' => false,
                'createDepositAddress' => true,
                'createLimitOrder' => true,
                'createMarketOrder' => true,
                'createOrder' => true,
                'deposit' => false,
                'editOrder' => 'emulated',
                'fetchBalance' => true,
                'fetchBidsAsks' => false,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDeposits' => true,
                'fetchFundingFees' => true,
                'fetchL2OrderBook' => false,
                'fetchLedger' => false,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrderBooks' => false,
                'fetchOrders' => true,
                'fetchOrderTrades' => false,
                'fetchStatus' => 'emulated',
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => true,
                'fetchTradingLimits' => false,
                'fetchTransactions' => false,
                'fetchWithdrawals' => true,
                'privateAPI' => true,
                'publicAPI' => true,
                'withdraw' => false,
            ),
            'urls' => array(
                'logo' => '',
                'api' => array(
                    'web' => 'https://max.maicoin.com',
                    'wapi' => '',
                    'public' => 'https://max-api.maicoin.com',
                    'private' => 'https://max-api.maicoin.com',
                ),
                'www' => 'https://max.maicoin.com',
                'doc' => 'https://max.maicoin.com/documents/api',
                'fees' => 'https://max.maicoin.com/docs/fees',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'summary',
                        'markets',
                        'currencies',
                        'tickers/{market_id}',
                        'tickers',
                        'withdrawal/constraint',
                        'depth',
                        'trades',
                        'k',
                        'timestamp',
                        'vip_levels',
                        'vip_levels/{level}',
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'members/profile',
                        'members/accounts/{currency_id}',
                        'members/accounts',
                        'members/vip_level',
                        'members/me',
                        'deposits',
                        'deposit',
                        'deposit_addresses',
                        'withdrawals',
                        'withdrawal',
                        'withdrawal_addresses',
                        'orders',
                        'order',
                        'trades/my/of_order',
                        'trades/my',
                        'internal_transfers',
                        'internal_transfer',
                        'rewards/{reward_type}',
                        'rewards',
                        'max_rewards/yesterday',
                    ),
                    'post' => array(
                        'deposit_addresses',
                        'orders/clear',
                        'orders',
                        'orders/multi/onebyone',
                        'order/delete',
                    ),
                ),
            ),
            'timeframes' => array(
                '1m' => '1',
                '5m' => '5',
                '15m' => '15',
                '30m' => '30',
                '1h' => '60',
                '2h' => '120',
                '4h' => '240',
                '6h' => '360',
                '12h' => '720',
                '1d' => '1440',
                '3d' => '4320',
                '1w' => '10080',
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'percentage' => true,
                    'maker' => 0.05 / 100,
                    'taker' => 0.15 / 100,
                    'tiers' => array(
                        'taker' => [
                            // volume in TWD
                            [0, 0.15 / 100],
                            [3000000, 0.135 / 100],
                            [10000000, 0.12 / 100],
                            [30000000, 0.105 / 100],
                            [150000000, 0.09 / 100],
                            [300000000, 0.075 / 100],
                            [600000000, 0.06 / 100],
                        ],
                        'maker' => [
                            // volume in TWD
                            [0, 0.05 / 100],
                            [3000000, 0.045 / 100],
                            [10000000, 0.04 / 100],
                            [30000000, 0.035 / 100],
                            [150000000, 0.03 / 100],
                            [300000000, 0.025 / 100],
                            [600000000, 0.02 / 100],
                        ],
                    ),
                ),
                'funding' => array(
                    'tierBased' => false,
                    'percentage' => false,
                    'withdraw' => array(),
                    'deposit' => array(),
                ),
            ),
            'commonCurrencies' => array(
            ),
            'options' => array(
                'timeDifference' => 0, // the difference between system clock and Max clock
                'adjustForTimeDifference' => false, // controls the adjustment logic upon instantiation
            ),
            'exceptions' => array(
                '2002' => '\\ccxt\\InvalidOrder', // Order volume too small
                '2003' => '\\ccxt\\OrderNotFound', // Failed to cancel order
                '2004' => '\\ccxt\\OrderNotFound', // Order doesn't exist
                '2005' => '\\ccxt\\AuthenticationError', // Signature is incorrect.
                '2006' => '\\ccxt\\AuthenticationError', // The nonce has already been used by access key.
                '2007' => '\\ccxt\\AuthenticationError', // The nonce is invalid. (30 secconds difference from server time)
                '2008' => '\\ccxt\\AuthenticationError', // The access key does not exist.
                '2009' => '\\ccxt\\AuthenticationError', // The access key is disabled.
                '2011' => '\\ccxt\\AuthenticationError', // Requested API is out of access key scopes.
                '2014' => '\\ccxt\\AuthenticationError', // Payload is not consistent with body or wrong path in payload.
                '2015' => '\\ccxt\\AuthenticationError', // Payload is invalid
                '2016' => '\\ccxt\\InvalidOrder', // amount_too_small
                '2018' => '\\ccxt\\InsufficientFunds', // cannot lock funds
            ),
        ));
    }

    public function fetch_time($params = array ()) {
        $response = $this->publicGetTimestamp ();
        return intval($response, 10) * 1000;
    }

    public function nonce() {
        return $this->milliseconds() - $this->options['timeDifference'];
    }

    public function load_time_difference() {
        $serverTimestamp = $this->fetch_time();
        $after = $this->milliseconds();
        $this->options['timeDifference'] = $after - $serverTimestamp;
        return $this->options['timeDifference'];
    }

    public function fetch_funding_fees($params = array ()) {
        $response = $this->publicGetWithdrawalConstraint ($params);
        //
        //     array(
        //       {
        //          "currency" => "eth",
        //          "fee" => "0.002",
        //          "ratio" => "0.0",
        //          "min_amount" => "0.02"
        //        }
        //     )
        //
        $withdrawFees = array();
        for ($i = 0; $i < count($response); $i++) {
            $id = $this->safe_value($response[$i], 'currency');
            $code = $this->safe_currency_code($id);
            $withdrawFees[$code] = $this->safe_float($response[$i], 'fee');
        }
        return array(
            'withdraw' => $withdrawFees,
            'deposit' => array(),
            'info' => $response,
        );
    }

    public function fetch_currencies($params = array ()) {
        $currenciesResponse = $this->publicGetCurrencies ($params);
        $withdrawalConstraintResponse = $this->publicGetWithdrawalConstraint ();
        $withdrawalConstraint = $this->index_by($withdrawalConstraintResponse, 'currency');
        $result = array();
        for ($i = 0; $i < count($currenciesResponse); $i++) {
            $currency = $currenciesResponse[$i];
            $id = $this->safe_string($currency, 'id');
            $code = $this->safe_currency_code($id);
            $fiat = $id === 'twd' ? true : false;
            $precision = $this->safe_integer($currency, 'precision');
            $withdrawal = $this->safe_value($withdrawalConstraint, $id);
            $withdrawalFee = $this->safe_value($withdrawal, 'fee');
            $withdrawalLimit = $this->safe_value($withdrawal, 'min_amount');
            $minAmount = $this->safe_float($this->options['minimumAmountOfCurrencies'], $code);
            $result[$code] = array(
                'id' => $id,
                'code' => $code,
                'name' => $code,
                'active' => true, // TODO
                'fiat' => $fiat,
                'precision' => $precision,
                'limits' => array(
                    'amount' => array(
                        'min' => $minAmount,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => pow(10, -$precision),
                        'max' => null,
                    ),
                    'deposit' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => $withdrawalLimit,
                        'max' => null,
                    ),
                ),
                'funding' => array(
                    'withdraw' => array(
                        'fee' => $withdrawalFee,
                    ),
                    'deposit' => array(
                        'fee' => null,
                    ),
                ),
                'info' => $currency,
            );
        }
        return $result;
    }

    public function fetch_markets($params = array ()) {
        //
        //    {
        //      $id => 'btcusdt',
        //      name => 'BTC/USDT',
        //      base_unit => 'btc',
        //      base_unit_precision => 6,
        //      min_base_amount => 0.001,
        //      quote_unit => 'usdt',
        //      quote_unit_precision => 2,
        //      min_quote_amount => 8.0
        //    }
        //
        $markets = $this->publicGetMarkets ();
        if ($this->options['adjustForTimeDifference']) {
            $this->load_time_difference();
        }
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $id = $this->safe_string($market, 'id');
            $baseId = $this->safe_string($market, 'base_unit');
            $quoteId = $this->safe_string($market, 'quote_unit');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
            $precision = array(
                'amount' => $this->safe_integer($market, 'base_unit_precision'),
                'price' => $this->safe_integer($market, 'quote_unit_precision'),
            );
            $active = true;
            $baseMinSize = $this->safe_float($market, 'min_base_amount');
            $quoteMinSize = $this->safe_float($market, 'min_quote_amount');
            $entry = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'info' => $market,
                'active' => $active,
                'precision' => $precision,
                'limits' => array(
                    'amount' => array(
                        'min' => $baseMinSize,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => pow(10, -$precision['price']),
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => $quoteMinSize,
                        'max' => null,
                    ),
                ),
            );
            $result[] = $entry;
        }
        return $result;
    }

    public function calculate_fee($symbol, $type, $side, $amount, $price, $takerOrMaker = 'taker', $params = array ()) {
        $market = $this->markets[$symbol];
        $rate = $market[$takerOrMaker];
        $cost = $amount * $rate;
        $key = 'quote';
        if ($side === 'sell') {
            $cost *= $price;
        } else {
            $key = 'base';
        }
        $code = $market[$key];
        $currency = $this->safe_value($this->currencies, $code);
        if ($currency !== null) {
            $precision = $this->safe_integer($currency, 'precision');
            if ($precision !== null) {
                $cost = floatval($this->currency_to_precision($code, $cost));
            }
        }
        return array(
            'type' => $takerOrMaker,
            'currency' => $market[$key],
            'rate' => $rate,
            'cost' => $cost,
        );
    }

    public function fetch_balance($params = array ()) {
        $this->load_markets();
        $response = $this->privateGetMembersAccounts ($params);
        $result = array( 'info' => $response );
        for ($i = 0; $i < count($response); $i++) {
            $balance = $response[$i];
            $currencyId = $this->safe_string($balance, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_float($balance, 'balance');
            $account['used'] = $this->safe_float($balance, 'locked');
            $account['total'] = $this->sum($account['free'], $account['used']);
            $result[$code] = $account;
        }
        return $this->parse_balance($result);
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit; // default = 300
        }
        $response = $this->publicGetDepth (array_merge($request, $params));
        $timestamp = $this->safe_timestamp($response, 'timestamp');
        $orderbook = $this->parse_order_book($response, $timestamp);
        return $orderbook;
    }

    public function parse_ticker($ticker, $market = null) {
        $timestamp = $this->safe_timestamp($ticker, 'at');
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        } else if (is_array($ticker) && array_key_exists('symbol', $ticker)) {
            $marketId = $this->safe_string($ticker, 'symbol');
            if ($marketId !== null) {
                if (is_array($this->markets_by_id) && array_key_exists($marketId, $this->markets_by_id)) {
                    $market = $this->markets_by_id[$marketId];
                    $symbol = $market['symbol'];
                }
            }
        }
        $last = $this->safe_float($ticker, 'last');
        return array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_float($ticker, 'high'),
            'low' => $this->safe_float($ticker, 'low'),
            'bid' => $this->safe_float($ticker, 'buy'),
            'bidVolume' => null,
            'ask' => $this->safe_float($ticker, 'sell'),
            'askVolume' => null,
            'vwap' => null,
            'open' => $this->safe_float($ticker, 'open'),
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $this->safe_float($ticker, 'vol'),
            'quoteVolume' => null,
            'info' => $ticker,
        );
    }

    public function fetch_ticker($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $response = $this->publicGetTickersMarketId (array_merge(array(
            'market_id' => $market['id'],
        ), $params));
        $response['symbol'] = $market['id'];
        return $this->parse_ticker($response, $market);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        $this->load_markets();
        $response = $this->publicGetTickers ($params);
        $tickerKeys = is_array($response) ? array_keys($response) : array();
        $result = array();
        for ($i = 0; $i < count($tickerKeys); $i++) {
            $key = $tickerKeys[$i];
            $response[$key]['symbol'] = $key;
            $ticker = $this->parse_ticker($response[$key]);
            $symbol = $ticker['symbol'];
            $result[$symbol] = $ticker;
        }
        return $this->filter_by_array($result, 'symbol', $symbols);
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        return array(
            $this->safe_timestamp($ohlcv, 0),
            $this->safe_float($ohlcv, 1),
            $this->safe_float($ohlcv, 2),
            $this->safe_float($ohlcv, 3),
            $this->safe_float($ohlcv, 4),
            $this->safe_float($ohlcv, 5),
        );
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
            'period' => $this->timeframes[$timeframe],
        );
        if ($since !== null) {
            $request['timestamp'] = intval($since) / 1000;
        }
        if ($limit !== null) {
            $request['limit'] = $limit; // default = 30
        }
        $response = $this->publicGetK (array_merge($request, $params));
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }

    public function parse_deposit_address($code, $response) {
        if (strlen($response) < 1) {
            throw new InvalidAddress($this->id . ' fetchDepositAddress ' . $code . ' returned empty $address->');
        }
        $depositAddress = $response[0];
        $address = $this->safe_string($depositAddress, 'address');
        if ($address === 'suspended') {
            throw new InvalidAddress($this->id . ' fetchDepositAddress ' . $code . ' returned an suspended $address->');
        }
        $tag = null;
        if ($code === 'XRP' && $address) {
            $splitted = explode('?dt=', $address);
            $address = $splitted[0];
            $tag = $splitted[1];
        }
        $this->check_address($address);
        return array(
            'info' => $response,
            'currency' => $code,
            'address' => $address,
            'tag' => $tag,
        );
    }

    public function create_deposit_address($code, $params = array ()) {
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = $this->privatePostDepositAddresses (array_merge($request, $params));
        return $this->parse_deposit_address($code, $response);
    }

    public function fetch_deposit_address($code, $params = array ()) {
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = $this->privateGetDepositAddresses (array_merge($request, $params));
        return $this->parse_deposit_address($code, $response);
    }

    public function parse_transaction_status_by_type($status, $type = null) {
        $statusesByType = array(
            'deposit' => array(
                'submitting' => 'pending',
                'cancelled' => 'canceled',
                'submitted' => 'pending',
                'suspended' => 'pending',
                'rejected' => 'failed',
                'accepted' => 'ok',
                'checking' => 'pending',
                'refunded' => 'failed',
                'suspect' => 'pending',
                'refund_cancelled' => 'ok',
            ),
            'withdrawal' => array(
                'submitting' => 'pending',
                'submitted' => 'pending',
                'rejected' => 'failed',
                'accepted' => 'pending',
                'suspect' => 'pending',
                'approved' => 'pending',
                'processing' => 'pending',
                'retryable' => 'pending',
                'sent' => 'pending',
                'canceled' => 'canceled',
                'failed' => 'failed',
                'pending' => 'pending',
                'confirmed' => 'ok',
                'kgi_manually_processing' => 'pending',
                'kgi_instruction_sent' => 'pending',
                'kgi_manually_confirmed' => 'ok',
                'kgi_possible_failed' => 'pending',
                'sygna_verifying' => 'pending',
            ),
        );
        $statuses = $this->safe_value($statusesByType, $type, array());
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // fetchDeposits
        //
        //   {
        //      $currency => 'eth',
        //      currency_version => 'eth',
        //      $amount => '1.12345',
        //      $fee => '0.123',
        //      $txid => '0x123456789abcdef...',
        //      created_at => 1584584162,
        //      updated_at => 1584584199,
        //      confirmations => '12',
        //      state => 'accepted',
        //      $type => 'deposit'
        //    }
        //
        // fetchWithdrawals
        //
        //    {
        //      uuid => '0123456789...',
        //      $currency => 'eth',
        //      currency_version => 'eth',
        //      $amount => '1.12345',
        //      $fee => '0.123',
        //      fee_currency => 'max',
        //      $txid => '0x123456789abcdef...',
        //      created_at => 1597164616,
        //      updated_at => 1598847790,
        //      state => 'confirmed',
        //      $type => 'withdrawal'
        //    }
        //
        $txid = $this->safe_string($transaction, 'txid');
        $id = $this->safe_string($transaction, 'uuid', $txid);
        $currencyId = $this->safe_string($transaction, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $timestamp = $this->safe_timestamp($transaction, 'created_at');
        $updated = $this->safe_timestamp($transaction, 'updated_at');
        $amount = $this->safe_float($transaction, 'amount');
        $feeCurrencyId = $this->safe_string($transaction, 'fee_currency');
        $feeCurrency = null;
        if (is_array($this->currencies_by_id) && array_key_exists($feeCurrencyId, $this->currencies_by_id)) {
            $feeCurrency = $this->currencies_by_id[$feeCurrencyId];
        }
        if ($feeCurrency !== null) {
            $feeCurrencyId = $feeCurrency['code'];
        } else {
            $feeCurrencyId = $this->safe_currency_code($feeCurrencyId);
        }
        $fee = array(
            'cost' => $this->safe_float($transaction, 'fee'),
            'currency' => $feeCurrencyId,
        );
        $type = $this->safe_string($transaction, 'type');
        $status = $this->parse_transaction_status_by_type($this->safe_string($transaction, 'state'), $type);
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txid,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'address' => null,
            'tag' => null,
            'type' => $type,
            'amount' => $amount,
            'currency' => $code,
            'status' => $status,
            'updated' => $updated,
            'fee' => $fee,
        );
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $currency = null;
        $request = array();
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        if ($since !== null) {
            $request['from'] = (int) floor(intval($since, 10) / 1000);
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->privateGetWithdrawals (array_merge($request, $params));
        for ($i = 0; $i < count($response); $i++) {
            $response[$i]['type'] = 'withdrawal';
        }
        return $this->parse_transactions($response, $currency, $since, $limit);
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $currency = null;
        $request = array();
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        if ($since !== null) {
            $request['from'] = (int) floor(intval($since, 10) / 1000);
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->privateGetDeposits (array_merge($request, $params));
        for ($i = 0; $i < count($response); $i++) {
            $response[$i]['type'] = 'deposit';
        }
        return $this->parse_transactions($response, $currency, $since, $limit);
    }

    public function parse_side($side) {
        if (!$side) {
            return null;
        }
        if ($side === 'buy' || $side === 'sell') {
            return $side;
        }
        if ($side === 'bid') {
            return 'buy';
        }
        if ($side === 'ask') {
            return 'sell';
        }
        // self-trade
        return $side;
    }

    public function parse_trade($trade, $market = null) {
        //
        // public trades
        //
        //    {
        //        "$id" => 4813073,
        //        "$price" => "3980.0",
        //        "volume" => "0.000264",
        //        "funds" => "1.05072",
        //        "$market" => "btcusdt",
        //        "market_name" => "BTC/USDT",
        //        "created_at" => 1553341297,
        //        "created_at_in_ms" => 1553341297000,
        //        "$side" => "bid"
        //    }
        //
        //
        // private trades
        //
        //    {
        //        "$id" => 3175037,
        //        "$price" => "3986.97",
        //        "volume" => "0.125",
        //        "funds" => "498.37125",
        //        "$market" => "btcusdt",
        //        "market_name" => "BTC/USDT",
        //        "created_at" => 1543941724,
        //        "created_at_in_ms" => 1543941724000,
        //        "$side" => "ask",
        //        "$fee" => "0.747557",
        //        "fee_currency" => "usdt",
        //        "order_id" => 18298466
        //        "info" => {
        //            "maker" => "ask",
        //            "ask" => array("$fee" => "0.747557", "fee_currency" => "usdt", "order_id" => 18298466),
        //            "bid" => null
        //        }
        //    }
        $timestamp = $this->safe_timestamp($trade, 'created_at');
        $price = $this->safe_float($trade, 'price');
        $amount = $this->safe_float($trade, 'volume');
        $id = $this->safe_string($trade, 'id');
        $side = $this->safe_string($trade, 'side');
        $order = $this->safe_string($trade, 'order_id');
        $cost = $this->safe_float($trade, 'funds');
        $fee = null;
        if (is_array($trade) && array_key_exists('fee', $trade)) {
            $fee = array(
                'cost' => $this->safe_float($trade, 'fee'),
                'currency' => $this->safe_currency_code($trade['fee_currency']),
            );
        }
        $takerOrMaker = null;
        if (is_array($trade) && array_key_exists('info', $trade)) {
            $tradeInfo = $this->safe_value($trade, 'info');
            $tradeMakerSide = $this->safe_string_2($tradeInfo, 'maker');
            if ($tradeMakerSide !== null && $side !== null) {
                $takerOrMaker = ($tradeMakerSide === $side) ? 'maker' : 'taker';
            }
        }
        $marketId = $this->safe_string($trade, 'market');
        $symbol = $this->safe_symbol($marketId, $market);
        return array(
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'id' => $id,
            'order' => $order,
            'type' => null,
            'takerOrMaker' => $takerOrMaker,
            'side' => $this->parse_side($side),
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => $fee,
        );
    }

    public function fetch_trading_fees($params = array ()) {
        //    {
        //      current_vip_level => array(
        //        $level => 0,
        //        minimum_trading_volume => 0,
        //        minimum_staking_volume => 0,
        //        maker_fee => 0.0005,
        //        taker_fee => 0.0015
        //      ),
        //      next_vip_level => {
        //        $level => 1,
        //        minimum_trading_volume => 3000000,
        //        minimum_staking_volume => 500,
        //        maker_fee => 0.00045,
        //        taker_fee => 0.00135
        //      }
        //    }
        $this->load_markets();
        $response = $this->privateGetMembersVipLevel ($params);
        $level = $this->safe_value($response, 'current_vip_level');
        return array(
            'info' => $response,
            'maker' => $this->safe_float($level, 'maker_fee'),
            'taker' => $this->safe_float($level, 'taker_fee'),
        );
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
        );
        // $since is not supported
        // if ($since !== null) {
        //     $request['timestamp'] = (int) floor(intval($since, 10) / 1000);
        // }
        if ($limit !== null) {
            $request['limit'] = $limit; // default = 50, maximum = 1000
        }
        $response = $this->publicGetTrades (array_merge($request, $params));
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchMyTrades requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        // $since is not supported
        // if ($since !== null) {
        //     $request['timestamp'] = (int) floor(intval($since, 10) / 1000);
        // }
        $response = $this->privateGetTradesMy (array_merge($request, $params));
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function fetch_order_trades($id, $symbol = null, $since = null, $limit = null, $params = array ()) {
        $request = array(
            'id' => $id,
            // 'client_oid' => client_oid, // user specific order $id in RFC 4122 format. only persist for 24 hours
        );
        $response = $this->privateGetTradesMyOfOrder (array_merge($request, $params));
        return $this->parse_trades($response);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'wait' => 'open',
            'cancel' => 'canceled',
            'done' => 'closed',
            'convert' => 'open',
            'finalizing' => 'open',
            'failed' => 'canceled',
        );
        return (is_array($statuses) && array_key_exists($status, $statuses)) ? $statuses[$status] : $status;
    }

    public function parse_order($order, $market = null) {
        //   {
        //     $id => 12345678,
        //     client_oid => null,
        //     $side => 'buy',
        //     ord_type => 'limit',
        //     $price => '0.01',
        //     stop_price => null,
        //     avg_price => '0.0',
        //     state => 'wait',
        //     $market => 'maxusdt',
        //     created_at => 1604983942,
        //     created_at_in_ms => 1604983942224,
        //     updated_at => 1604983942,
        //     updated_at_in_ms => 1604983942224,
        //     volume => '2000.0',
        //     remaining_volume => '2000.0',
        //     executed_volume => '0.0',
        //     trades_count => 0,
        //     group_id => 1
        //   }
        $status = $this->parse_order_status($this->safe_string($order, 'state'));
        $marketId = $this->safe_string($order, 'market');
        $symbol = $this->safe_symbol($marketId, $market);
        $timestamp = $this->safe_timestamp($order, 'created_at');
        $id = $this->safe_string($order, 'id');
        $clientOrderId = $this->safe_string($order, 'client_oid');
        $price = $this->safe_float($order, 'price');
        $amount = $this->safe_float($order, 'volume');
        $average = $this->safe_float($order, 'avg_price');
        $filled = $this->safe_float($order, 'executed_volume');
        $cost = null;
        $remaining = $this->safe_float($order, 'remaining_volume');
        $type = $this->safe_string($order, 'ord_type');
        if ($type !== null) {
            if ($type === 'market') {
                if ($price === null) {
                    $price = $average;
                }
            }
        }
        if ($price !== null) {
            $cost = $price * $filled;
        }
        $side = $this->safe_string($order, 'side');
        $result = array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'average' => $average,
            'filled' => $filled,
            'remaining' => $remaining,
            'status' => $status,
            'fee' => null,
            'trades' => null,
        );
        return $result;
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $lowercaseType = strtolower($type);
        $order = array(
            'market' => $market['id'],
            'volume' => $this->amount_to_precision($symbol, $amount),
            'ord_type' => $lowercaseType,
            'side' => $side,
        );
        $clientOrderId = $this->safe_string_2($params, 'client_oid', 'clientOrderId');
        if ($clientOrderId !== null) {
            $order['client_oid'] = $clientOrderId;
            $params = $this->omit($params, array( 'client_oid', 'clientOrderId' ));
        }
        $priceIsRequired = false;
        $stopPriceIsRequired = false;
        if ($lowercaseType === 'limit' || $lowercaseType === 'stop_limit' || $lowercaseType === 'post_only') {
            $priceIsRequired = true;
        }
        if ($lowercaseType === 'stop_limit' || $lowercaseType === 'stop_market') {
            $stopPriceIsRequired = true;
        }
        if ($priceIsRequired) {
            if ($price === null) {
                throw new InvalidOrder($this->id . ' createOrder method requires a $price argument for a ' . $lowercaseType . ' order');
            }
            $order['price'] = $this->price_to_precision($symbol, $price);
        }
        if ($stopPriceIsRequired) {
            $stop_price = $this->safe_float($params, 'stop_price');
            if ($stop_price === null) {
                throw new InvalidOrder($this->id . ' createOrder method requires a $stop_price extra param for a ' . $lowercaseType . ' order');
            }
            $params = $this->omit($params, 'stop_price');
            $order['stop_price'] = $this->price_to_precision($symbol, $stop_price);
        }
        $response = $this->privatePostOrders (array_merge($order, $params));
        return $this->parse_order($response, $market);
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        $request = array();
        if ($symbol !== null) {
            $this->load_markets();
            $marketId = $this->market_id($symbol);
            $request['market'] = $marketId;
        }
        return $this->privatePostOrdersClear (array_merge($request, $params));
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        $request = array();
        $clientOrderId = $this->safe_string_2($params, 'client_oid', 'clientOrderId');
        if ($clientOrderId !== null) {
            $request['client_oid'] = $clientOrderId;
            $params = $this->omit($params, array( 'client_oid', 'clientOrderId' ));
        } else {
            $request['id'] = $id;
        }
        $response = $this->privatePostOrderDelete (array_merge($request, $params));
        return $this->parse_order($response);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array();
        $clientOrderId = $this->safe_string_2($params, 'client_oid', 'clientOrderId');
        if ($clientOrderId !== null) {
            $request['client_oid'] = $clientOrderId;
            $params = $this->omit($params, array( 'client_oid', 'clientOrderId' ));
        } else {
            $request['id'] = $id;
        }
        $response = $this->privateGetOrder (array_merge($request, $params));
        return $this->parse_order($response);
    }

    public function fetch_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrders requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        // $since is not supported
        // if ($since !== null) {
        //     $request['timestamp'] = (int) floor(intval($since, 10) / 1000);
        // }
        $response = $this->privateGetOrders (array_merge($request, $params));
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        return $this->fetch_orders($symbol, $since, $limit, array_merge($params, array( 'state' => ['cancel', 'done', 'failed'] )));
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        return $this->fetch_orders($symbol, $since, $limit, array_merge($params, array( 'state' => ['wait', 'convert', 'finalizing'] )));
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $newParams = $params;
        $request = '/api/' . $this->version . '/' . $this->implode_params($path, $params);
        $url = $this->urls['api'][$api];
        $url .= $request;
        if (!$headers) {
            $headers = array();
        }
        $headers['X-MAX-AGENT'] = 'ccxt';
        if ($api === 'private') {
            $this->check_required_credentials();
            $newParams = array_merge($params, array(
                'nonce' => $this->nonce(),
                'path' => $request,
            ));
            $payload = base64_encode($this->encode($this->json($newParams)));
            $signature = $this->hmac($payload, $this->encode($this->secret));
            $headers = array_merge($headers, array(
                'X-MAX-ACCESSKEY' => $this->apiKey,
                'X-MAX-PAYLOAD' => $this->decode($payload),
                'X-MAX-SIGNATURE' => $signature,
            ));
        }
        if ($method === 'GET' || $method === 'DELETE') {
            if (!$this->is_empty($newParams)) {
                $newParamsIsArray = array();
                $newParamsOthers = array();
                $newParamsKeys = is_array($newParams) ? array_keys($newParams) : array();
                for ($i = 0; $i < count($newParamsKeys); $i++) {
                    $key = $newParamsKeys[$i];
                    if (gettype($newParams[$key]) === 'array' && count(array_filter(array_keys($newParams[$key]), 'is_string')) == 0) {
                        $newParamsIsArray[$key] = $newParams[$key];
                    } else {
                        $newParamsOthers[$key] = $newParams[$key];
                    }
                }
                $url .= '?';
                if (!$this->is_empty($newParamsOthers)) {
                    $url .= $this->urlencode($newParamsOthers);
                }
                if (!$this->is_empty($newParamsOthers) && !$this->is_empty($newParamsIsArray)) {
                    $url .= '&';
                }
                if (!$this->is_empty($newParamsIsArray)) {
                    $result = array();
                    $newParamsIsArrayKeys = is_array($newParamsIsArray) ? array_keys($newParamsIsArray) : array();
                    for ($i = 0; $i < count($newParamsIsArrayKeys); $i++) {
                        $key = $newParamsIsArrayKeys[$i];
                        for ($j = 0; $j < count($newParamsIsArray[$key]); $j++) {
                            $result[] = $key . '%5B%5D=' . $newParamsIsArray[$key][$j];
                        }
                    }
                    $url .= implode('&', $result);
                }
            }
        } else {
            $body = $this->json($newParams);
            $headers = array_merge($headers, array(
                'Content-Type' => 'application/json',
            ));
        }
        return array(
            'url' => $url,
            'method' => $method,
            'body' => $body,
            'headers' => $headers,
        );
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return; // fallback to default $error handler
        }
        $error = $this->safe_value($response, 'error');
        if (gettype($error) === 'string') {
            return;
        }
        $code = $error && $this->safe_string($error, 'code');
        if ($code) {
            $feedback = $this->id . ' ' . $this->safe_string($error, 'message');
            if (is_array($this->exceptions) && array_key_exists($code, $this->exceptions)) {
                throw new $this->exceptions[$code]($feedback);
            } else {
                throw new ExchangeError($feedback);
            }
        }
    }
}
